{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "audio-visualizer",
  "type": "registry:component",
  "title": "Audio Visualizer",
  "description": "Audio visualizer component",
  "dependencies": [
    "@omi3/utils",
    "@omi3/audio"
  ],
  "files": [
    {
      "path": "src/registry/new-york/blocks/audio/elements/visualizer.tsx",
      "content": "\"use client\";\n\nimport {\n  PlaybackState,\n  useAudioState\n} from \"@omi3/audio/react\";\nimport { cn } from \"@/lib/utils\";\nimport { drawVisualization } from \"@omi3/utils\";\nimport { useEffect, useRef, useState } from \"react\";\n\ntype AudioVisualizerProps = React.ComponentProps<\"canvas\"> & {\n  width?: number;\n  height?: number;\n  backgroundColor?: string;\n  lineColor?: string;\n};\n\nexport function AudioVisualizer({\n  className,\n  width: initialWidth,\n  height = 50,\n  backgroundColor = \"oklch(14.67% 0.0041 49.31)\",\n  lineColor = \"oklch(84.94% 0.2069 128.89)\",\n  ...props\n}: AudioVisualizerProps) {\n  const { playbackState, analyserNode } = useAudioState();\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationFrameId = useRef<number | null>(null);\n  const dataArray = useRef<Uint8Array | null>(null);\n  const [currentWidth, setCurrentWidth] = useState(initialWidth ?? 0);\n  const isPlaying = playbackState === PlaybackState.PLAYING;\n\n  useEffect(() => {\n    if (!initialWidth && canvasRef.current?.parentElement) {\n      setCurrentWidth(canvasRef.current.parentElement.clientWidth);\n    } else if (initialWidth) {\n      setCurrentWidth(initialWidth);\n    }\n  }, [initialWidth]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const parentElement = canvas?.parentElement;\n    if (!parentElement) { return; }\n\n    const resizeObserver = new ResizeObserver(entries => {\n      for (const entry of entries) {\n        setCurrentWidth(entry.contentRect.width);\n      }\n    });\n\n    resizeObserver.observe(parentElement);\n\n    return () => {\n      if (parentElement) {\n        resizeObserver.unobserve(parentElement);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext(\"2d\");\n    if (!canvas || !ctx || currentWidth === 0 || height === 0) {\n      return;\n    }\n\n    if (canvas.width !== currentWidth) {\n      canvas.width = currentWidth;\n    }\n    if (canvas.height !== height) {\n      canvas.height = height;\n    }\n\n    const performDraw = () => {\n      if (isPlaying && analyserNode && dataArray.current) {\n        drawVisualization(ctx, analyserNode, dataArray.current, currentWidth, height, backgroundColor, lineColor);\n        animationFrameId.current = requestAnimationFrame(performDraw);\n      } else {\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(0, 0, currentWidth, height);\n        ctx.fillStyle = lineColor;\n        ctx.fillRect(0, Math.floor(height / 2) - 1, currentWidth, 2);\n      }\n    };\n\n    if (isPlaying && analyserNode) {\n      if (!dataArray.current || dataArray.current.length !== analyserNode.frequencyBinCount) {\n        dataArray.current = new Uint8Array(analyserNode.frequencyBinCount);\n      }\n      if (animationFrameId.current === null) {\n        animationFrameId.current = requestAnimationFrame(performDraw);\n      }\n    } else {\n      if (animationFrameId.current !== null) {\n        cancelAnimationFrame(animationFrameId.current);\n        animationFrameId.current = null;\n      }\n      performDraw();\n    }\n\n    return () => {\n      if (animationFrameId.current !== null) {\n        cancelAnimationFrame(animationFrameId.current);\n        animationFrameId.current = null;\n      }\n    };\n  }, [isPlaying, analyserNode, currentWidth, height, backgroundColor, lineColor]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className={cn(\"border rounded-lg bg-card/50\", className)}\n      {...props}\n      style={{\n        width: \"100%\",\n        height: `${height}px`,\n        display: currentWidth === 0 ? \"none\" : \"block\",\n        ...(props.style || {}),\n      }}\n      data-state={isPlaying ? \"playing\" : \"idle\"}\n    />\n  );\n}\n",
      "type": "registry:component",
      "target": "components/audio/elements/visualizer.tsx"
    }
  ]
}