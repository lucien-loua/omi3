{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "audio-controls",
  "type": "registry:component",
  "title": "Audio Controls",
  "description": "Audio controls component",
  "dependencies": [
    "@omi3/utils",
    "@omi3/audio"
  ],
  "registryDependencies": [
    "button",
    "tooltip",
    "https://omi3.ouestlabs.com/registry/spinner"
  ],
  "files": [
    {
      "path": "src/registry/new-york/blocks/audio/elements/controls.tsx",
      "content": "\"use client\";\n\nimport {\n  PlaybackState,\n  useAudio\n} from \"@omi3/audio/react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Spinner } from \"@/components/ui/spinner\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { Pause, Play, SkipBack, SkipForward } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\n\n\ntype AudioControlsProps = React.ComponentProps<\"div\">\n\nexport function AudioControls({ className, ...props }: AudioControlsProps) {\n  const {\n    isPlaying,\n    isLoading,\n    isBuffering,\n    playbackState,\n    currentMusic,\n    isEngineInitialized,\n    play,\n    pause,\n  } = useAudio();\n\n  const [isActionPending, setIsActionPending] = useState(false);\n  const showSpinner = !isEngineInitialized || isLoading || isBuffering || isActionPending;\n\n  const canPlayPause = useMemo(() =>\n    isEngineInitialized && (\n      playbackState === PlaybackState.READY ||\n      playbackState === PlaybackState.PAUSED ||\n      (playbackState === PlaybackState.IDLE && currentMusic != null)\n    ),\n    [isEngineInitialized, playbackState, currentMusic]\n  );\n\n  const isPlayPauseDisabled = isActionPending || (!isPlaying && !canPlayPause);\n\n  const disablePrevious = !isEngineInitialized || true;\n  const disableNext = !isEngineInitialized || true;\n\n  const handlePlayPause = useCallback(async () => {\n    if (isPlayPauseDisabled || isActionPending) { return; }\n\n    setIsActionPending(true);\n    try {\n      if (isPlaying) {\n        await Promise.resolve(pause());\n      } else if (canPlayPause) {\n        await Promise.resolve(play());\n      }\n    } catch (error) {\n      console.error(\"Error during play/pause action:\", error);\n    } finally {\n      setTimeout(() => setIsActionPending(false), 100);\n    }\n  }, [isPlayPauseDisabled, isActionPending, isPlaying, canPlayPause, pause, play]);\n\n  const handlePrevious = useCallback(() => {\n    if (!isEngineInitialized) { return; }\n    console.log(\"Previous track requested (not implemented)\");\n  }, [isEngineInitialized]);\n\n  const handleNext = useCallback(() => {\n    if (!isEngineInitialized) { return; }\n    console.log(\"Next track requested (not implemented)\");\n  }, [isEngineInitialized]);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      const target = event.target as HTMLElement;\n      if (event.key === \" \" && target.tagName !== 'INPUT' && target.tagName !== 'TEXTAREA' && target.tagName !== 'SELECT' && !target.isContentEditable) {\n        event.preventDefault();\n        handlePlayPause();\n      }\n    };\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [handlePlayPause]);\n\n  return (\n    <TooltipProvider delayDuration={100}>\n      <div\n        className={cn(\"flex items-center justify-center gap-2\", className)}\n        {...props}\n        data-state={isPlaying ? \"playing\" : \"paused\"}\n      >\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handlePrevious}\n              disabled={disablePrevious}\n              aria-label=\"Previous Track\"\n            >\n              <SkipBack className=\"fill-current\" />\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent>\n            <p>Previous Track</p>\n          </TooltipContent>\n        </Tooltip>\n\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              size=\"icon\"\n              className=\"rounded-full\"\n              onClick={handlePlayPause}\n              disabled={isPlayPauseDisabled}\n              aria-label={isPlaying ? \"Pause\" : \"Play\"}\n              aria-live=\"polite\"\n            >\n              {showSpinner ? (\n                <Spinner className=\"animate-spin\" />\n              ) : isPlaying ? (\n                <Pause className=\"fill-current\" />\n              ) : (\n                <Play className=\"fill-current\" />\n              )}\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent>\n            <p>{isPlaying ? \"Pause\" : \"Play\"}</p>\n          </TooltipContent>\n        </Tooltip>\n\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleNext}\n              disabled={disableNext}\n              aria-label=\"Next Track\"\n            >\n              <SkipForward className=\"fill-current\" />\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent>\n            <p>Next Track</p>\n          </TooltipContent>\n        </Tooltip>\n      </div>\n    </TooltipProvider>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/audio/elements/controls.tsx"
    }
  ]
}