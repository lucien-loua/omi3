{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "audio-volume",
  "type": "registry:component",
  "title": "Audio Volume",
  "description": "Audio volume control component",
  "dependencies": [
    "@omi3/audio"
  ],
  "registryDependencies": [
    "button",
    "dropdown-menu",
    "slider"
  ],
  "files": [
    {
      "path": "src/registry/new-york/blocks/audio/elements/volume.tsx",
      "content": "\"use client\";\n\nimport {\n  useAudio,\n} from \"@omi3/audio/react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { cn } from \"@/lib/utils\";\nimport { Volume, Volume1, Volume2, VolumeX } from \"lucide-react\";\nimport { useCallback } from \"react\";\n\ntype AudioVolumeProps = React.ComponentProps<typeof DropdownMenu> & {\n  className?: string;\n  triggerClassName?: string;\n  sliderProps?: React.ComponentProps<typeof Slider>;\n};\n\nexport function AudioVolume({\n  className,\n  triggerClassName,\n  sliderProps,\n  ...props\n}: AudioVolumeProps) {\n  const {\n    volume,\n    isMuted,\n    isEngineInitialized,\n    setVolume,\n  } = useAudio();\n\n  const handleVolumeChange = useCallback((value: number[]) => {\n    const newVolume = value[0];\n    if (isEngineInitialized && newVolume !== undefined) {\n      setVolume(newVolume);\n    }\n  }, [isEngineInitialized, setVolume]);\n\n  const getVolumeIcon = useCallback(() => {\n    if (!isEngineInitialized || isMuted || volume === 0) {\n      return <VolumeX className=\"h-5 w-5\" aria-hidden=\"true\" />;\n    }\n    if (volume < 0.33) {\n      return <Volume className=\"h-5 w-5\" aria-hidden=\"true\" />;\n    }\n    if (volume < 0.77) {\n      return <Volume1 className=\"h-5 w-5\" aria-hidden=\"true\" />;\n    }\n    return <Volume2 className=\"h-5 w-5\" aria-hidden=\"true\" />;\n  }, [isEngineInitialized, isMuted, volume]);\n\n  const volumePercentage = Math.round((isMuted ? 0 : volume) * 100);\n  const currentVolume = isMuted ? 0 : volume;\n  const isDisabled = !isEngineInitialized;\n  return (\n    <DropdownMenu {...props}>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className={cn(\"hidden md:flex\", triggerClassName)}\n          disabled={isDisabled}\n          aria-label={`Volume Control: ${volumePercentage}%${isMuted ? ' (Muted)' : ''}`}\n          data-state={isMuted ? \"muted\" : volume === 0 ? \"zero\" : \"active\"}\n        >\n          {getVolumeIcon()}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        side=\"top\"\n        align=\"center\"\n        className={cn(\"w-48 p-3\", className)}\n        onCloseAutoFocus={(e) => e.preventDefault()}\n      >\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Volume</span>\n            <span className=\"text-sm font-medium tabular-nums\">{volumePercentage}%</span>\n          </div>\n          <Slider\n            value={[currentVolume]}\n            max={1}\n            step={0.01}\n            onValueChange={handleVolumeChange}\n            disabled={isDisabled}\n            className={cn(\"w-full\", sliderProps?.className)}\n            aria-label=\"Volume Control Slider\"\n            {...sliderProps}\n          />\n        </div>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/audio/elements/volume.tsx"
    }
  ]
}