{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "audio-player",
  "type": "registry:component",
  "title": "Audio Player",
  "description": "Simple audio player component",
  "dependencies": [
    "@omi3/utils",
    "@omi3/audio"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "slider",
    "dropdown-menu",
    "tooltip",
    "skeleton",
    "http://localhost:3000/registry/spinner"
  ],
  "files": [
    {
      "path": "src/registry/new-york/blocks/audio/elements/controls.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { useAudioEngine, PlaybackState } from \"@omi3/audio/react\";\nimport { cn } from \"@omi3/ui/lib/utils\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@omi3/ui/components/tooltip\";\nimport { Button } from \"@omi3/ui/components/button\";\nimport { Spinner } from \"@omi3/ui/components/spinner\";\nimport { Pause, Play, SkipBack, SkipForward } from \"lucide-react\";\n\ntype AudioControlsProps = React.ComponentProps<\"div\">\nexport function AudioControls({ className, ...props }: AudioControlsProps) {\n  const {\n    isPlaying,\n    isLoading,\n    isBuffering,\n    playbackState,\n    isEngineInitialized,\n    currentMusic,\n    play,\n    pause\n  } = useAudioEngine();\n\n  const [isActionPending, setIsActionPending] = useState(false);\n  const showSpinner = !isEngineInitialized || isLoading || isBuffering || isActionPending;\n\n  const canPlayPause = useMemo(() =>\n    isEngineInitialized && (\n      playbackState === PlaybackState.READY ||\n      playbackState === PlaybackState.PAUSED ||\n      (playbackState === PlaybackState.IDLE && currentMusic != null)\n    ),\n    [isEngineInitialized, playbackState, currentMusic]\n  );\n\n  const isPlayPauseDisabled = isActionPending || (!isPlaying && !canPlayPause);\n\n  const disablePrevious = !isEngineInitialized || true;\n  const disableNext = !isEngineInitialized || true;\n\n  const handlePlayPause = useCallback(async () => {\n    if (isPlayPauseDisabled || isActionPending) { return; }\n\n    setIsActionPending(true);\n    try {\n      if (isPlaying) {\n        await Promise.resolve(pause());\n      } else if (canPlayPause) {\n        await Promise.resolve(play());\n      }\n    } catch (error) {\n      console.error(\"Error during play/pause action:\", error);\n    } finally {\n      setTimeout(() => setIsActionPending(false), 100);\n    }\n  }, [isPlayPauseDisabled, isActionPending, isPlaying, canPlayPause, pause, play]);\n\n  const handlePrevious = useCallback(() => {\n    if (!isEngineInitialized) { return; }\n    console.log(\"Previous track requested (not implemented)\");\n  }, [isEngineInitialized]);\n\n  const handleNext = useCallback(() => {\n    if (!isEngineInitialized) { return; }\n    console.log(\"Next track requested (not implemented)\");\n  }, [isEngineInitialized]);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      const target = event.target as HTMLElement;\n      if (event.key === \" \" && target.tagName !== 'INPUT' && target.tagName !== 'TEXTAREA' && target.tagName !== 'SELECT' && !target.isContentEditable) {\n        event.preventDefault();\n        handlePlayPause();\n      }\n    };\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [handlePlayPause]);\n\n  return (\n    <TooltipProvider delayDuration={100}>\n      <div\n        className={cn(\"flex items-center justify-center gap-2\", className)}\n        {...props}\n        data-state={isPlaying ? \"playing\" : \"paused\"}\n      >\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handlePrevious}\n              disabled={disablePrevious}\n              aria-label=\"Previous Track\"\n            >\n              <SkipBack className=\"fill-current\" />\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent>\n            <p>Previous Track</p>\n          </TooltipContent>\n        </Tooltip>\n\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              size=\"icon\"\n              className=\"rounded-full\"\n              onClick={handlePlayPause}\n              disabled={isPlayPauseDisabled}\n              aria-label={isPlaying ? \"Pause\" : \"Play\"}\n              aria-live=\"polite\"\n            >\n              {showSpinner ? (\n                <Spinner className=\"animate-spin\" />\n              ) : isPlaying ? (\n                <Pause className=\"fill-current\" />\n              ) : (\n                <Play className=\"fill-current\" />\n              )}\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent>\n            <p>{isPlaying ? \"Pause\" : \"Play\"}</p>\n          </TooltipContent>\n        </Tooltip>\n\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleNext}\n              disabled={disableNext}\n              aria-label=\"Next Track\"\n            >\n              <SkipForward className=\"fill-current\" />\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent>\n            <p>Next Track</p>\n          </TooltipContent>\n        </Tooltip>\n      </div>\n    </TooltipProvider>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/audio/elements/controls.tsx"
    },
    {
      "path": "src/registry/new-york/blocks/audio/elements/file-input.tsx",
      "content": "\"use client\";\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { useAudioEngine, type Music } from \"@omi3/audio/react\";\nimport { cn } from \"@omi3/ui/lib/utils\";\nimport { Input } from \"@omi3/ui/components/input\";\nimport { toast } from \"sonner\";\nimport { Label } from \"@omi3/ui/components/label\";\n\ntype AudioFileInputProps = React.ComponentProps<typeof Input> & {\n  label?: string;\n};\n\nexport function AudioFileInput({\n  label = \"Load a local audio file:\",\n  className,\n  ...props\n}: AudioFileInputProps) {\n  const { isLoading, isEngineInitialized, load } = useAudioEngine();\n  const [currentBlobUrl, setCurrentBlobUrl] = useState<string | null>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const id = React.useId();\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n\n    if (files && files.length > 0 && isEngineInitialized) {\n      const file = files[0];\n\n      if (!file || !file.type.startsWith(\"audio/\")) {\n        toast.error(\"Invalid audio file\");\n        if (inputRef.current) { inputRef.current.value = \"\"; }\n        return;\n      }\n\n      if (currentBlobUrl) {\n        URL.revokeObjectURL(currentBlobUrl);\n      }\n\n      const blobUrl = URL.createObjectURL(file);\n      setCurrentBlobUrl(blobUrl);\n\n      const music: Music = {\n        title: file.name,\n        artist: \"Unknown artist\",\n        url: blobUrl\n      };\n\n      load(music);\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      if (currentBlobUrl) {\n        URL.revokeObjectURL(currentBlobUrl);\n      }\n    };\n  }, [currentBlobUrl]);\n\n  const isDisabled = !isEngineInitialized || isLoading;\n\n  return (\n    <div className=\"flex flex-col gap-2\" data-state={isDisabled ? \"disabled\" : \"enabled\"}>\n      {label && (\n        <Label htmlFor={id} className=\"text-sm font-medium\">\n          {label}\n        </Label>\n      )}\n      <Input\n        ref={inputRef}\n        id={id}\n        type=\"file\"\n        accept=\"audio/*\"\n        onChange={handleFileChange}\n        disabled={isDisabled}\n        className={cn(className)}\n        {...props}\n      />\n      {isLoading && (\n        <span className=\"text-xs text-muted-foreground\">Loading audio engine...</span>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/audio/elements/file-input.tsx"
    },
    {
      "path": "src/registry/new-york/blocks/audio/elements/seek-bar.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useAudioEngine, PlaybackState } from \"@omi3/audio/react\";\nimport { cn } from \"@omi3/ui/lib/utils\";\nimport { Slider } from \"@omi3/ui/components/slider\";\nimport { formatDuration, formatSecondsToISO8601 } from \"@omi3/utils\";\ntype AudioSeekBarProps = React.ComponentProps<typeof Slider> & {\n  className?: string;\n};\n\nexport function AudioSeekBar({ className, ...props }: AudioSeekBarProps) {\n  const {\n    currentTime,\n    duration,\n    playbackState,\n    error,\n    isEngineInitialized,\n    seek\n  } = useAudioEngine();\n\n  const [isDragging, setIsDragging] = useState(false);\n  const [internalTime, setInternalTime] = useState(currentTime);\n\n  useEffect(() => {\n    if (!isDragging) {\n      setInternalTime(currentTime);\n    }\n  }, [currentTime, isDragging]);\n\n  useEffect(() => {\n    if (duration === 0 && internalTime !== 0) {\n      setInternalTime(0);\n    }\n  }, [duration, internalTime]);\n\n  const handleValueChange = (value: number[]) => {\n    const newTime = value[0];\n    if (newTime !== undefined) {\n      setInternalTime(newTime);\n      if (!isDragging) {\n        setIsDragging(true);\n      }\n      if (isDragging && isEngineInitialized) {\n        seek(newTime);\n      }\n    }\n  };\n\n  const handlePointerDown = () => {\n    if (!isDragging) {\n      setIsDragging(true);\n    }\n  };\n\n  const handleValueCommit = (value: number[]) => {\n    const seekTime = value[0];\n    if (isDragging && isEngineInitialized && seekTime !== undefined) {\n      seek(seekTime);\n    }\n    setIsDragging(false);\n  };\n\n  const isDisabled = !isEngineInitialized ||\n    !Number.isFinite(duration) ||\n    duration <= 0 ||\n    playbackState === PlaybackState.IDLE ||\n    playbackState === PlaybackState.LOADING ||\n    playbackState === PlaybackState.ERROR ||\n    error !== null;\n\n  const displayTime = Number.isFinite(internalTime) ? (isDragging ? internalTime : currentTime) : 0;\n  const maxDuration = Number.isFinite(duration) && duration > 0 ? duration : 1;\n  const displayDuration = Number.isFinite(duration) ? duration : 0;\n\n  const formattedCurrentTime = formatDuration(displayTime);\n  const formattedRemainingTime = formatDuration(Math.max(0, displayDuration - displayTime));\n\n  const isoCurrentTime = formatSecondsToISO8601(displayTime);\n  const isoRemainingTime = formatSecondsToISO8601(Math.max(0, displayDuration - displayTime));\n\n  return (\n    <div className={cn(\"w-full\", className)} data-state={isDisabled ? \"disabled\" : \"enabled\"}>\n      <div className=\"flex items-center justify-between text-xs text-muted-foreground mb-1.5\">\n        <time dateTime={isoCurrentTime}>{formattedCurrentTime}</time>\n        <time dateTime={isoRemainingTime}>-{formattedRemainingTime}</time>\n      </div>\n      <Slider\n        value={[displayTime]}\n        max={maxDuration}\n        step={0.1}\n        disabled={isDisabled}\n        onValueChange={handleValueChange}\n        onPointerDown={handlePointerDown}\n        onValueCommit={handleValueCommit}\n        aria-label=\"Audio Seek Bar\"\n        {...props}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/audio/elements/seek-bar.tsx"
    },
    {
      "path": "src/registry/new-york/blocks/audio/elements/track-info.tsx",
      "content": "\"use client\";\n\nimport { useAudioEngine } from \"@omi3/audio/react\";\nimport { cn } from \"@omi3/ui/lib/utils\";\nimport { MusicIcon } from \"lucide-react\";\nimport { Skeleton } from \"@omi3/ui/components/skeleton\";\n\ntype AudioTrackArtworkProps = React.ComponentProps<\"div\"> & {\n  iconClassName?: string;\n};\n\nfunction AudioTrackArtwork({ className, iconClassName, ...props }: AudioTrackArtworkProps) {\n  return (\n    <div\n      className={cn(\n        \"h-10 w-10 flex-shrink-0 flex items-center justify-center bg-muted rounded-sm\",\n        className\n      )}\n      {...props}\n    >\n      <MusicIcon className={cn(\"h-5 w-5 text-muted-foreground\", iconClassName)} />\n    </div>\n  );\n}\n\ntype AudioTrackInfoProps = React.ComponentProps<\"div\">;\n\nexport function AudioTrackInfo({ className, ...props }: AudioTrackInfoProps) {\n  const { isLoading, error, currentMusic } = useAudioEngine();\n\n  if (isLoading) {\n    return (\n      <div\n        className={cn(\"flex items-center space-x-2 w-full truncate\", className)}\n        {...props}\n        data-state=\"loading\"\n        aria-live=\"polite\"\n        aria-busy=\"true\"\n      >\n        <AudioTrackArtwork />\n        <div className=\"space-y-1\">\n          <Skeleton className=\"h-4 w-[150px]\" />\n          <Skeleton className=\"h-3 w-[100px]\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div\n        className={cn(\"flex items-center space-x-2 w-full truncate text-destructive\", className)}\n        {...props}\n        data-state=\"error\"\n        role=\"alert\"\n      >\n        <AudioTrackArtwork />\n        <div className=\"space-y-1\">\n          <p className=\"text-sm font-medium\">Error loading track</p>\n          <p className=\"text-xs\">{error.message || \"An unknown error occurred.\"}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentMusic) {\n    return (\n      <div\n        className={cn(\"flex items-center space-x-2 w-full truncate\", className)}\n        {...props}\n        data-state=\"empty\"\n      >\n        <AudioTrackArtwork />\n        <div className=\"space-y-1\">\n          <p className=\"text-sm font-medium\">No track selected</p>\n          <p className=\"text-xs text-muted-foreground\">Please select a track</p>\n        </div>\n      </div>\n    );\n  }\n\n  const itemScope = true;\n  const itemType = \"https://schema.org/MusicRecording\";\n\n  return (\n    <div\n      className={cn(\"flex items-center space-x-2 w-full truncate\", className)}\n      itemScope={itemScope}\n      itemType={itemType}\n      {...props}\n      data-state=\"loaded\"\n    >\n      {currentMusic.artwork ? (\n        <figure className=\"size-10 flex-shrink-0 aspect-square rounded-sm overflow-hidden\" itemProp=\"image\">\n          <img\n            src={currentMusic.artwork.src}\n            alt={`Artwork for ${currentMusic.title || 'track'}`}\n            className=\"size-full object-cover\"\n          />\n        </figure>\n      ) : (\n        <AudioTrackArtwork />\n      )}\n      <dl className=\"space-y-1 overflow-hidden\">\n        <div>\n          <dt className=\"sr-only\">Title</dt>\n          <dd className=\"text-sm font-medium truncate\" itemProp=\"name\">\n            {currentMusic.title || \"Unknown Title\"}\n          </dd>\n        </div>\n        <div>\n          <dt className=\"sr-only\">Artist</dt>\n          <dd className=\"text-xs text-muted-foreground truncate\" itemProp=\"byArtist\">\n            {currentMusic.artist || \"Unknown Artist\"}\n          </dd>\n        </div>\n      </dl>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/audio/elements/track-info.tsx"
    },
    {
      "path": "src/registry/new-york/blocks/audio/elements/visualizer.tsx",
      "content": "\"use client\";\n\nimport { useRef, useEffect, useState } from \"react\";\nimport { useAudioEngine, PlaybackState } from \"@omi3/audio/react\";\nimport { cn } from \"@omi3/ui/lib/utils\";\nimport { drawVisualization } from \"@omi3/utils\";\n\ntype AudioVisualizerProps = React.ComponentProps<\"canvas\"> & {\n  width?: number;\n  height?: number;\n  backgroundColor?: string;\n  lineColor?: string;\n};\n\nexport function AudioVisualizer({\n  className,\n  width: initialWidth,\n  height = 50,\n  backgroundColor = \"oklch(14.67% 0.0041 49.31)\",\n  lineColor = \"oklch(84.94% 0.2069 128.89)\",\n  ...props\n}: AudioVisualizerProps) {\n  const { analyserNode, playbackState } = useAudioEngine();\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationFrameId = useRef<number | null>(null);\n  const dataArray = useRef<Uint8Array | null>(null);\n  const [currentWidth, setCurrentWidth] = useState(initialWidth ?? 0);\n  const isPlaying = playbackState === PlaybackState.PLAYING;\n\n  useEffect(() => {\n    if (!initialWidth && canvasRef.current?.parentElement) {\n      setCurrentWidth(canvasRef.current.parentElement.clientWidth);\n    } else if (initialWidth) {\n      setCurrentWidth(initialWidth);\n    }\n  }, [initialWidth]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const parentElement = canvas?.parentElement;\n    if (!parentElement) { return; }\n\n    const resizeObserver = new ResizeObserver(entries => {\n      for (const entry of entries) {\n        setCurrentWidth(entry.contentRect.width);\n      }\n    });\n\n    resizeObserver.observe(parentElement);\n\n    return () => {\n      if (parentElement) {\n        resizeObserver.unobserve(parentElement);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext(\"2d\");\n    if (!canvas || !ctx || currentWidth === 0 || height === 0) { return; }\n\n    if (canvas.width !== currentWidth) {\n      canvas.width = currentWidth;\n    }\n    if (canvas.height !== height) {\n      canvas.height = height;\n    }\n\n    const performDraw = () => {\n      if (isPlaying && analyserNode && dataArray.current) {\n        drawVisualization(ctx, analyserNode, dataArray.current, currentWidth, height, backgroundColor, lineColor);\n        animationFrameId.current = requestAnimationFrame(performDraw);\n      } else {\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(0, 0, currentWidth, height);\n        ctx.fillStyle = lineColor;\n        ctx.fillRect(0, Math.floor(height / 2) - 1, currentWidth, 2);\n      }\n    };\n\n    if (isPlaying && analyserNode) {\n      if (!dataArray.current || dataArray.current.length !== analyserNode.frequencyBinCount) {\n        dataArray.current = new Uint8Array(analyserNode.frequencyBinCount);\n      }\n      if (animationFrameId.current === null) {\n        animationFrameId.current = requestAnimationFrame(performDraw);\n      }\n    } else {\n      if (animationFrameId.current !== null) {\n        cancelAnimationFrame(animationFrameId.current);\n        animationFrameId.current = null;\n      }\n      performDraw();\n    }\n\n    return () => {\n      if (animationFrameId.current !== null) {\n        cancelAnimationFrame(animationFrameId.current);\n        animationFrameId.current = null;\n      }\n    };\n  }, [isPlaying, analyserNode, currentWidth, height, backgroundColor, lineColor]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className={cn(\"border rounded-lg bg-card/50\", className)}\n      {...props}\n      style={{\n        width: \"100%\",\n        height: `${height}px`,\n        display: currentWidth === 0 ? \"none\" : \"block\",\n        ...(props.style || {}),\n      }}\n      data-state={isPlaying ? \"playing\" : \"idle\"}\n    />\n  );\n}\n",
      "type": "registry:component",
      "target": "components/audio/elements/visualizer.tsx"
    },
    {
      "path": "src/registry/new-york/blocks/audio/elements/volume.tsx",
      "content": "\"use client\";\n\nimport { useCallback } from \"react\";\nimport { useAudioEngine } from \"@omi3/audio/react\";\nimport { cn } from \"@omi3/ui/lib/utils\";\nimport { Button } from \"@omi3/ui/components/button\";\nimport { Slider } from \"@omi3/ui/components/slider\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@omi3/ui/components/dropdown-menu\";\nimport { Volume, Volume1, Volume2, VolumeX } from \"lucide-react\";\n\ntype AudioVolumeProps = React.ComponentProps<typeof DropdownMenu> & {\n  className?: string;\n  triggerClassName?: string;\n  sliderProps?: React.ComponentProps<typeof Slider>;\n};\n\nexport function AudioVolume({\n  className,\n  triggerClassName,\n  sliderProps,\n  ...props\n}: AudioVolumeProps) {\n  const { volume, isMuted, isEngineInitialized, setVolume } = useAudioEngine();\n\n  const handleVolumeChange = useCallback((value: number[]) => {\n    const newVolume = value[0];\n    if (isEngineInitialized && newVolume !== undefined) {\n      setVolume(newVolume);\n    }\n  }, [isEngineInitialized, setVolume]);\n\n  const getVolumeIcon = useCallback(() => {\n    if (!isEngineInitialized || isMuted || volume === 0) {\n      return <VolumeX className=\"h-5 w-5\" aria-hidden=\"true\" />;\n    }\n    if (volume < 0.33) {\n      return <Volume className=\"h-5 w-5\" aria-hidden=\"true\" />;\n    }\n    if (volume < 0.77) {\n      return <Volume1 className=\"h-5 w-5\" aria-hidden=\"true\" />;\n    }\n    return <Volume2 className=\"h-5 w-5\" aria-hidden=\"true\" />;\n  }, [isEngineInitialized, isMuted, volume]);\n\n  const volumePercentage = Math.round((isMuted ? 0 : volume) * 100);\n  const currentVolume = isMuted ? 0 : volume;\n  const isDisabled = !isEngineInitialized;\n  return (\n    <DropdownMenu {...props}>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className={cn(\"hidden md:flex\", triggerClassName)}\n          disabled={isDisabled}\n          aria-label={`Volume Control: ${volumePercentage}%${isMuted ? ' (Muted)' : ''}`}\n          data-state={isMuted ? \"muted\" : volume === 0 ? \"zero\" : \"active\"}\n        >\n          {getVolumeIcon()}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        side=\"top\"\n        align=\"center\"\n        className={cn(\"w-48 p-3\", className)}\n        onCloseAutoFocus={(e) => e.preventDefault()}\n      >\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Volume</span>\n            <span className=\"text-sm font-medium tabular-nums\">{volumePercentage}%</span>\n          </div>\n          <Slider\n            value={[currentVolume]}\n            max={1}\n            step={0.01}\n            onValueChange={handleVolumeChange}\n            disabled={isDisabled}\n            className={cn(\"w-full\", sliderProps?.className)}\n            aria-label=\"Volume Control Slider\"\n            {...sliderProps}\n          />\n        </div>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/audio/elements/volume.tsx"
    },
    {
      "path": "src/registry/new-york/blocks/audio/player.tsx",
      "content": "\"use client\";\nimport { AudioFileInput } from \"./elements/file-input\";\nimport { AudioVisualizer } from \"./elements/visualizer\";\nimport { AudioSeekBar } from \"./elements/seek-bar\";\nimport { AudioTrackInfo } from \"./elements/track-info\";\nimport { AudioControls } from \"./elements/controls\";\nimport { AudioVolume } from \"./elements/volume\";\nimport { AudioProvider } from \"@omi3/audio/react\";\n\nexport function AudioPlayer() {\n  return (\n    <AudioProvider>\n      <section\n        aria-label=\"Audio Player Container\"\n        className=\"flex flex-col border rounded-lg p-2 w-full bg-card gap-2\"\n      >\n        <AudioFileInput />\n        <AudioVisualizer height={60} />\n        <AudioSeekBar />\n        <div className=\"flex items-center justify-between\">\n          <AudioTrackInfo />\n          <div className=\"flex items-center gap-2\">\n            <AudioControls />\n            <AudioVolume />\n          </div>\n        </div>\n      </section>\n    </AudioProvider>\n  );\n}\n",
      "type": "registry:block",
      "target": "components/audio/player.tsx"
    }
  ]
}