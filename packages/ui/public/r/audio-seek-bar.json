{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "audio-seek-bar",
  "type": "registry:component",
  "title": "Audio Seek Bar",
  "description": "Audio seek bar component",
  "dependencies": [
    "@omi3/utils",
    "@omi3/audio"
  ],
  "registryDependencies": [
    "slider"
  ],
  "files": [
    {
      "path": "src/registry/new-york/blocks/audio/elements/seek-bar.tsx",
      "content": "\"use client\";\n\nimport {\n  useAudioTime,\n  PlaybackState,\n  useAudio\n} from \"@omi3/audio/react\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { cn } from \"@/lib/utils\";\nimport { formatDuration, formatSecondsToISO8601 } from \"@omi3/utils\";\nimport { useEffect, useState } from \"react\";\n\ntype AudioSeekBarProps = React.ComponentProps<typeof Slider> & {\n  className?: string;\n};\n\nexport function AudioSeekBar({ className, ...props }: AudioSeekBarProps) {\n  const {\n    currentTime,\n    duration\n  } = useAudioTime();\n  const {\n    playbackState,\n    error,\n    isEngineInitialized,\n    seek,\n  } = useAudio();\n\n  const [isDragging, setIsDragging] = useState(false);\n  const [internalTime, setInternalTime] = useState(currentTime);\n\n  useEffect(() => {\n    if (!isDragging) {\n      setInternalTime(currentTime);\n    }\n  }, [currentTime, isDragging]);\n\n  useEffect(() => {\n    if (duration === 0 && internalTime !== 0) {\n      setInternalTime(0);\n    }\n  }, [duration, internalTime]);\n\n  const handleValueChange = (value: number[]) => {\n    const newTime = value[0];\n    if (newTime !== undefined) {\n      setInternalTime(newTime);\n      if (!isDragging) {\n        setIsDragging(true);\n      }\n      if (isDragging && isEngineInitialized) {\n        seek(newTime);\n      }\n    }\n  };\n\n  const handlePointerDown = () => {\n    if (!isDragging) {\n      setIsDragging(true);\n    }\n  };\n\n  const handleValueCommit = (value: number[]) => {\n    const seekTime = value[0];\n    if (isDragging && isEngineInitialized && seekTime !== undefined) {\n      seek(seekTime);\n    }\n    setIsDragging(false);\n  };\n\n  const isDisabled = !isEngineInitialized ||\n    !Number.isFinite(duration) ||\n    duration <= 0 ||\n    playbackState === PlaybackState.IDLE ||\n    playbackState === PlaybackState.LOADING ||\n    playbackState === PlaybackState.ERROR ||\n    error !== null;\n\n  const displayTime = Number.isFinite(internalTime) ? (isDragging ? internalTime : currentTime) : 0;\n  const maxDuration = Number.isFinite(duration) && duration > 0 ? duration : 1;\n  const displayDuration = Number.isFinite(duration) ? duration : 0;\n\n  const formattedCurrentTime = formatDuration(displayTime);\n  const formattedRemainingTime = formatDuration(Math.max(0, displayDuration - displayTime));\n\n  const isoCurrentTime = formatSecondsToISO8601(displayTime);\n  const isoRemainingTime = formatSecondsToISO8601(Math.max(0, displayDuration - displayTime));\n\n  return (\n    <div className={cn(\"w-full\", className)} data-state={isDisabled ? \"disabled\" : \"enabled\"}>\n      <div className=\"flex items-center justify-between text-xs text-muted-foreground mb-1.5\">\n        <time dateTime={isoCurrentTime}>{formattedCurrentTime}</time>\n        <time dateTime={isoRemainingTime}>-{formattedRemainingTime}</time>\n      </div>\n      <Slider\n        value={[displayTime]}\n        max={maxDuration}\n        step={0.1}\n        disabled={isDisabled}\n        onValueChange={handleValueChange}\n        onPointerDown={handlePointerDown}\n        onValueCommit={handleValueCommit}\n        aria-label=\"Audio Seek Bar\"\n        {...props}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/audio/elements/seek-bar.tsx"
    }
  ]
}