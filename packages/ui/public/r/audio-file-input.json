{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "audio-file-input",
  "type": "registry:component",
  "title": "Audio File Input",
  "description": "Audio file input component",
  "dependencies": [
    "@omi3/utils",
    "@omi3/audio",
    "sonner"
  ],
  "registryDependencies": [
    "input",
    "label"
  ],
  "files": [
    {
      "path": "src/registry/new-york/blocks/audio/elements/file-input.tsx",
      "content": "\"use client\";\n\nimport {\n  type Music,\n  useAudio\n} from \"@omi3/audio/react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { cn } from \"@/lib/utils\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { toast } from \"sonner\";\n\ntype AudioFileInputProps = React.ComponentProps<typeof Input> & {\n  label?: string;\n};\n\nexport function AudioFileInput({\n  label = \"Load a local audio file:\",\n  className,\n  ...props\n}: AudioFileInputProps) {\n  const {\n    isLoading,\n    isEngineInitialized,\n    load,\n  } = useAudio();\n  const [currentBlobUrl, setCurrentBlobUrl] = useState<string | null>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const id = React.useId();\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n\n    if (files && files.length > 0 && isEngineInitialized) {\n      const file = files[0];\n\n      if (!file || !file.type.startsWith(\"audio/\")) {\n        toast.error(\"Invalid audio file\");\n        if (inputRef.current) { inputRef.current.value = \"\"; }\n        return;\n      }\n\n      if (currentBlobUrl) {\n        URL.revokeObjectURL(currentBlobUrl);\n      }\n\n      const blobUrl = URL.createObjectURL(file);\n      setCurrentBlobUrl(blobUrl);\n\n      const music: Music = {\n        title: file.name,\n        artist: \"Unknown artist\",\n        url: blobUrl\n      };\n\n      load(music);\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      if (currentBlobUrl) {\n        URL.revokeObjectURL(currentBlobUrl);\n      }\n    };\n  }, [currentBlobUrl]);\n\n  const isDisabled = !isEngineInitialized || isLoading;\n\n  return (\n    <div className=\"flex flex-col gap-2\" data-state={isDisabled ? \"disabled\" : \"enabled\"}>\n      {label && (\n        <Label htmlFor={id} className=\"text-sm font-medium\">\n          {label}\n        </Label>\n      )}\n      <Input\n        ref={inputRef}\n        id={id}\n        type=\"file\"\n        accept=\"audio/*\"\n        onChange={handleFileChange}\n        disabled={isDisabled}\n        className={cn(className)}\n        {...props}\n      />\n      {isLoading && (\n        <span className=\"text-xs text-muted-foreground\">Loading audio engine...</span>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/audio/elements/file-input.tsx"
    }
  ]
}